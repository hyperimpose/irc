* Introduction

This page contains the documentation of an Erlang/OTP application that
implements the IRC client protocol.

Internet Relay Chat (IRC) is an internet protocol for text-based
instant messaging.

** What does this application offer?
This application aims to be a complete IRC client framework that can
be used in any project for connecting and interacting with other IRC
servers.

Everything related  to the IRC  protocol is managed  internally. Users
can subscribe to receive IRC messages and they can access the state of
the connection through a simple to use API.

** Pre-Requisite Knowledge
To use this IRC client framework you must be familiar with:
- Erlang/OTP :: https://www.erlang.org/doc/getting_started/users_guide
- The IRC client protocol :: https://www.rfc-editor.org/rfc/rfc1459.html / https://modern.ircdocs.horse/

* Components
In this section we describe the components and terminology involved in
using this IRC client framework in your own programs.

To see a hands on example, head over to the [[./usage.org][Usage Example]].

**** Id
This IRC framework has the ability  to connect to multiple IRC servers
simultaneously.   In order  to  be able  to  distinguish between  each
connection  we must  assign a  unique Id  to each  one of  the clients
started.

This Id must be an Erlang atom  and /must never be used anywhere else/
in the rest of your project to avoid name classes and other issues (in
ETS or other Erlang facilities).

**** irc_config
IRC  clients   retrieve  their   configuration  parameters   from  the
irc_config  gen  server.   You  must   use  this  module  to  set  the
configuration before you can connect to an IRC server.

The   irc_config   module   contains  functions   for   creating   the
configuration object from scratch.

***** Options

set/2 can be  used to set the configuration. Make  sure it conforms to
the config() type as specified in the [[../src/irc_client/irc_config.erl][irc_config.erl]] module.

get/1 takes as input the Id and returns the configuration.

The [[../src/irc_client/irc_config.erl][irc_config.erl]] module also contains setter functions that should be
used if you want to build the config map programmatically.

A brief summury of the options is provided on the table below:

| Option          | Explanation                               | Required | Default                                                  |
|-----------------+-------------------------------------------+----------+----------------------------------------------------------|
| address         | The hostname/IP of the IRC server         | yes      |                                                          |
| port            | The port used by the IRC server           |          | 6697                                                     |
| tls             | Whether to use TLS or not                 |          | true                                                     |
| server_password | The password used by the IRC server       |          | undefined                                                |
| packet_size     | The max number of bytes in an IRC message |          | 512                                                      |
| irc_send_mode   | See IRC message scheduling                |          | {shared, #{commands => 1, interval => 2000, size => 60}} |
| nickname        | The nickname to use                       | yes      |                                                          |
| user            | The username to use                       | yes      |                                                          |
| realname        | The realname to use                       | yes      |                                                          |
| nickserv        | See Nickserv                              |          | #{}                                                      |
| channels        | Channels to autojoin                      |          | #{}                                                      |
| sasl            | A list of SASL auth mechanisms to try     |          | []                                                       |
| cap_want        | A list of IRCv3 capabilities to enable    |          | [<<"sasl">>]                                             |
| handler         | See: [[Handler][Handler]]                              | yes      |                                                          |

**** Handler
In order to receive and react to IRC events you must implement a handler function.
The IRC client will pass any incoming messages to that function.

This function is specified by the `handler' option in the irc_config module.

Each message is passed in a synchronous manner, by calling the function.  This blocks
the IRC client until the  function returns.  It is, thus, important that the  handler
function does not run for extended periods of time.  It should also not crash as this
would also crash the client.

You can achieve asynchronous operation, by having the handler function message or
spawn other processes to handle each message. This is the recommended way to handle
messages.

The handler function  takes two arguements: the client Id and the Message received by
the server.

**** Messages

***** Parsed messages
Messages sent by the IRC server are parsed internally by the framework, handled by the
client runtime and then passed to the handler function.

Using the irc_parser module you can extract all the needed value from the parsed messages.
The function exposes getter functions for various IRC commands and messages. It also
exposes getters for IRC message primitives to allow handling commands that are not
supported yet.

IRC messages consist of one or more of the following parts:
- Prefix :: This referes to the origin (a user or a server) of the message.
- Command :: The IRC command of the message. (Always given)
- Params :: Any parameters of the Command.
- Tags :: IRCv3 related. See [[https://ircv3.net/specs/extensions/message-tags][the spec]].
  
You can access them with the following functions:
- irc_parser:get_tags/1
- irc_parser:get_prefix/1
- irc_parser:get_prefix_nick/1
- irc_parser:get_prefix_user/1
- irc_parser:get_prefix_host/1
- irc_parser:get_command/1
- irc_parser:get_params/1

Regarding the prefix functions, if no user or host is given, the nick may actually be
a servername. This is not a very common use case and you can distinguish between the
two depending on the command given.
If no prefix was sent by the server (all the prefix commands return undefined), then
the server didn't send a prefix and the message is assumed to have originated by the
server.

Instead of using the params command directly to handle a command you can use one of
the specialized command parsers provided by the [[../src/irc_messages/irc_parser.erl][irc_parser.erl]] module. The get_params/1
function can be used for cases where no specialized parser exists or it does not
cover the all the cases needed.

An example of using those functions is shown below:
#+BEGIN_SRC erlang
    handler(Id, Message) ->
        case irc_parser:get_command(Message) of  % Get the IRC command
            <<"PRIVMSG">> ->  % Someone sent a message
                %% Get the prefix of the user that sent the message.
                {ok, Nick, User, Host} = irc_parser:get_prefix(Message),
                %% Get the parameters for the PRIVMSG command.
                %% Normally we would use irc_parser:privmsg/1, but we do it this
                %% way to showcase the get_params/1 function.
                [Receiver, Text] = irc_parser:get_params(Message),
                %% Print them to console. It would print something like:
                %% User drastikbot!drastik@drastik.org sent Hello! in #channel
                io:format("User ~p!~p@~p sent ~p in ~p~n",
                          [Nick, User, Host, Text, Receiver]);
            <<"JOIN">> ->  % Someone joined a channel
                %% Get the user's nickname
                Nickname = irc_parser:get_prefix_nick(Message),
                %% Use the specialized parser for the join command. It supports
                %% both normal IRC join and IRCv3 extended-join. In this case we
                %% check for both possibilities to ensure maximum compatibility
                %% between servers.
                case irc_parser:join(Message) of
                    {ok, Channels} -> % Normal IRC Join. Channels is a list.
                        io:format("User ~p joined ~p", [Nickname, Channels]);
                    {ok, Channels, _Account, _Realname} -> % IRCv3 extended join
                        io:format("User ~p joined ~p", [Nickname, Channels])
                end;
            _Command ->
                %% Ignore any other command
                void
        end.
#+END_SRC

***** Casemapping
Some parts of the IRC protocol, such as nicknames, are case-insensitive. Converting
between cases or comparing strings on IRC can be complicated, because there are
different methods used by IRC servers to do casemapping. Because of this, proper
string comparison and case conversion is important to avoid related errors and bugs.

These are the main functions provided to handle casemapping:
- irc_parser:casefold/2
- irc_parser:is_equal/3
- irc_parser:lowercase/2
- irc_parser:uppercase/2

An example of how these functions can be used is shown below:
#+BEGIN_SRC erlang
  %% You must be connected to an IRC server for the following to
  %% work. Id must be set to the Id of the client.

  example() ->
      Id = client1,  % The Id of the target IRC client
      A = "HELLO",
      B = "hello",

      %% Casefold strings so they are suitable for comparison
      case irc_parser:casefold(Id, A) == irc_parser:casefold(Id, B) of
          true  -> io:format("The strings are equal");
          false -> io:format("The strings are not equal")
      end,

      %% The above comparison can be simplified:
      case irc_parser:is_equal(Id, A, B) of
          true  -> io:format("The strings are equal");
          false -> io:format("The strings are not equal")
      end,

      %% You can convert strings to different cases:
      irc_parser:lowercase(Id, A),
      irc_parser:uppercase(Id, B).

#+END_SRC


***** Client To Client Protocol (CTCP)
The CTCP is used for client side commands. It is embeded in PRIVMSG messages.

A common example is the /me command:
#+BEGIN_EXAMPLE
Many IRC clients have a feature where users can type /me <any message here> and
the message will be shown as if it was an action done by the user:

<drastik> | This is a normal message
        * | drastik is here

To get the second message I sent /me is here. Behind the scenes this message is
sent as: PRIVMSG #channel :\x01ACTION is here\x01\r\n

The \x01ACTION is here\x01 part is the CTCP message. We know this because it
starts with the \x01 ASCII control code.
#+END_EXAMPLE

The ~irc_parser:ctcp/1~ function is provided to parse CTCP messages. In the
example below, we implement an echo bot that supports CTCP ACTION commands
and sends the text inside them:
#+BEGIN_SRC erlang
  handler(Id, Message) ->
      case irc_parser:get_command(Message) of
          <<"PRIVMSG">> ->  % 1. Make sure you have a PRIVMSG message
              %% 2. Extract the text
              {ok, Recv, Text} = irc_parser:privmsg(Message),
              %% 3. Check if it is a CTCP message or not
              case irc_parser:ctcp(Text) of
                  not_ctcp ->
                      %% 3.1. Not a CTCP message
                      irc_send:schedule(Id, irc_make:privmsg(Id, Recv, Text));
                  {ok, Command, Params} ->
                      %% 3.2. This is a CTCP message. Check the CTCP command
                      case Command of
                          <<"ACTION">> ->
                              %% This is an ACTION command. Send the text back.
                              irc_send:schedule(Id, irc_make:privmsg(Id, Recv, Params));
                          _Unsupported ->
                              %% Ignore unknown commands
                              void
                      end
                end;
          _Command ->
              %% Ignore any other command
              void
      end.
#+END_SRC

Note that the CTCP has many different commands each with its own parameter
format, which may require further parsing. To support these commands in your
code you must read the relevant documentation and handle them yourself.

***** Formatting
IRC messages may contain text formatting such as colors, typographical emphasis (bold, italics) etc.
Read the following to learn how to include text formatting in your messages:
- https://modern.ircdocs.horse/formatting :: Detailed explanation
- https://gist.github.com/ion1/2791653 :: Quick reference

****** Stripping formatting
In many cases you will need to handle such messages in your programs. To do this you might need to
remove any formatting added. The function ~irc_parser:formatting_strip/1~ can be used for this.

**** State
The IRC client maintains the complete state of the connection. This state includes the current nickname used,
the user modes, the channels joined, information about those channels etc.

Check the [[./reference.org][Reference Manual]] to learn how to use the relevant modules to access the state.
