* Reference

This document serves  as a reference to the entire  API exposed by the
application.

** Available modules

- irc :: Starting and stopping IRC clients
- irc_channel :: Get information about joined IRC channels
- irc_config :: Get and set the configuration
- irc_isupport :: Get the value of the options given in the 005 ISUPPORT numeric
- irc_send :: Schedule and send messages to the IRC server
- irc_state :: View the current state of the IRC client

- irc_command :: Construct IRC protocol messages (low level)
- irc_make :: Construct IRC protocol messages (high level)
- irc_parser :: IRC message parsing and other utilities
  
** irc [[../src/irc.erl][[View source]​]]
This module provides functions for connecting and disconnecting IRC
clients.

/Before you can use these functions you must configure the library using the irc_config module./

- ~irc:connect(Id :: atom()) -> supervisor:startchild().~
- ~irc:disconnect(Id :: atom()) -> ok | {error, not_found | running | restarting}.~

** irc_channel [[../src/irc_client/irc_channel.erl][[View source]​]]
This module provides information about joined IRC channels.  You are only allowed to use the getter
functions of this module (prefixed with get_ or has_). View the source code to see all the available
functions.

** irc_config [[../src/irc_client/irc_config.erl][[View source]​]]
This module gives access to the configuration options.
The ~get/1~ and ~set/2~ functions work using complete configuration maps. You can then use the rest
of the functions to get or set individual options. View the source code to see all the available
functions.

***** NOTE 1
Never access, set or construct the configuration directly. Always use the functions provided.
The returned data structure is for internal use only and might change in the future.

***** NOTE 2
To gain access to the options that are used by the IRC client runtime use ~irc_state:get_config/1~.

Using ~irc_config:get/1~ gets the options meant for bootstrapping the connection. If those are updated
after the IRC client has been started they will be out of sync. This happens because the IRC client gets
the configuration options only when it is started and then it caches them internally. The new values will
be retrieved only if the client crashes and gets restarted by its supervisor or if you manually disconnect
and reconnect it.

After you get the options using one of the functions mentioned above you can then access their values using
the rest of the functions from the irc_config module.

** irc_isupport [[../src/irc_client/irc_isupport.erl][[View source]​]]
This module provides access to the values of the 005 ISUPPORT numeric.  You are only allowed to use
the getterfunctions of this module (prefixed with get_ or is_).  View the source code to see all
the available functions.

** irc_send [[../src/irc_client/irc_send.erl][[View source]​]]
Schedule and send messages to the IRC server. The behaviour of this module can be configured through
irc_config. Read the comments in the source code to get an understanding of its behaviour.

Only the function ~schedule/2~ is meant to be used externally.

You can also use ~now/2~, but only if you know what you are doing.

** irc_state [[../src/irc_client/irc_state.erl][[View source]​]]
This module gives access to the state of the IRC client.  It exposes information such as the current
nickname of the client, its modes etc.  You are only allowed to use the getter functions of this
module (prefixed with get_ or has_).  View the source code to see all the available functions.


** irc_command [[../src/irc_messages/irc_command.erl][[View source]​]]
Use this module to easily create IRC commands. Note that this is a low level module and you
should know what you are doing to use it. See the comments in the source code for details.
The output of the functions in this module can be used in the irc_send module.

Use irc_make whenever possible for safer, high level message construction.

View the source code to see all of the available functions.

** irc_make [[../src/irc_messages/irc_make.erl][[View source]​]]
Use this module to easily create IRC commands. The functions in this module will perform all
the necessary sanitization, splitting, truncation etc. on the given messages.
The output of the functions in this module can be used in the irc_send module.

View the source code to see all of the available functions.

** irc_parser [[../src/irc_messages/irc_parser.erl][[View source]​]]
Parses incoming IRC messages and extracts the required information out of them. It also
provides useful utilities for IRC aware casefolding, equality checking, removing text
formatting etc.

View the source code to see all of the available functions.
