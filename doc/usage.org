* Usage Example
This is an example implementation of a simple IRC echo bot using this IRC client framework.
Before you read this, you must read and understand the [[./guide.org][User's Guide]] and the [[./reference.org][Reference Manual]].

To implement the bot we must create the irc_settings module and its handler function:

*** irc_settings
In a new file called ~irc_settings.erl~ add the following code:

#+BEGIN_SRC erlang
  -module(irc_settings).
  -behaviour(irc_config).

  -export([get/1]).


  get(Id) ->
      case Id of
          example_id -> example_id()
      end.


  example_id() ->
      #{address       => "irc.example.org",
        port          => 6697,
        tls           => true,
        nickname      => "my_irc_client",
        user          => "my_irc_client",
        realname      => "My IRC client",
        channels      => #{"#channel" => <<>>},
        handler       => fun irc_dispatcher:message/2}.
#+END_SRC

We will use the client Id ~example_id~, but this can be anything you
want as long as it is a unique Erlang atom.

You can change the settings to point to a real IRC server if you want
to run this example.

*** Handler
As you can see in the previous section, we set our handler function to
be ~irc_dispatcher:message/2~. In a file called ~irc_dispatcher.erl~ add
the following code:

#+BEGIN_SRC erlang
  -module(irc_dispatcher).

  -export([message/2]).


  message(Id, Message) ->
      case irc_parser:get_command(Message) of
          <<"PRIVMSG">> ->
              %% Extract the source of the message and the text
              {ok, Recv, Text} = irc_parser:privmsg(Message),
              %% Send the same message back
              irc_send:schedule(Id, irc_make:privmsg(Id, Recv, Text));
          _Command ->
              %% Ignore any other command
              void
      end.
#+END_SRC

Our handler function ~message/2~ takes two arguements: the client Id and the Message itself.

We extract the IRC command from the Message and check to see if it a PRIVMSG (a normal text
message sent to an IRC channel or privately with the bot).  If it is indeed a PRIVMSG we
send the same message back, otherwise we ignore the message.

** Putting it all together

You can now compile the files above and run them together with irc application.

Once you are in the Erlang emulator with the irc application started
and the two modules above loaded you can start the IRC client with:

#+BEGIN_SRC erlang
  irc:connect(example_id).
#+END_SRC
